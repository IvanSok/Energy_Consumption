#
# ###############################################################################
#
# # Renaming submeter columns by room:
newDF <- newDF %>% rename(Kitchen = Sub_metering_1,
Laundry = Sub_metering_2,
WaterHeater_AirConditioner = Sub_metering_3)
#
# # Renaming quarters:
newDF$quarter <- as.factor(newDF$quarter)
class(newDF$quarter)
levels(newDF$quarter)
levels(newDF$quarter) <- c("Spring", "Summer", "Autumn", "Winter")
# # Filtering out 2010 data in newDF:
newDF <-filter(newDF, year != 2010)
#
write.csv(x = newDF, file = "combined_DF.csv")
newDF <- read.csv("combined_DF.csv")
Off_peak <- read_csv("NormalFares.csv")
Peak <- read_csv("PeakFares.csv")
# Data conversion:
newDF$Global_active_power <- newDF$Global_active_power / 60 #converting from kW/min to kW/h
newDF$Global_reactive_power <- newDF$Global_reactive_power / 60 #converting from kW/min to kW/h
newDF$Kitchen <- newDF$Kitchen / 1000 #converting from W/hour to kW/hour
newDF$Laundry <- newDF$Laundry / 1000 #converting from W/hour to kW/hour
newDF$WaterHeater_AirConditioner <- newDF$WaterHeater_AirConditioner / 1000 #converting from W/hour to kW/hour
write.csv(x = newDF, file = "converted_DF.csv")
newDF <- read.csv("converted_DF.csv")
View(newDF)
View(newDF)
View(newDF)
View(newDF)
View(newDF)
View(newDF)
View(newDF)
#Energy not measured by submeters:
newDF$excess_energy <- newDF$Global_active_power - newDF$Kitchen - newDF$Laundry - newDF$WaterHeater_AirConditioner
newDF$price <- c(NA)
newDF$price <- ifelse (between(newDF$hour,left = 2, right = 7) | between(newDF$hour, left = 14, right = 17), yes = 0.123, no = 0.158)
## Granularity adjustments:
houseWeek <- newDF %>% filter(year == 2008 & week == 2)
View(con)
View(houseWeek)
View(houseWeek)
## Granularity adjustments:
houseWeek <- newDF %>% filter(year == 2008 & week == 2) %>% group_by(hour)
plot(houseWeek$kitchen)
plot(houseWeek$Kitchen)
## Granularity adjustments:
houseWeek <- newDF %>% filter(year == 2008 & week == 2) %>% group_by(hour) %>% summarise(Kitchen = mean(Kitchen))
plot(houseWeek$Kitchen)
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly)
## Subset the 9th day of January 2008 - All observations:
houseDay <- newDF %>% filter(year == 2008 & month == 1 & day == 9)
plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Kitchen, type = 'scatter', mode = "lines")
## Plot sub-meter 1, 2 and 3 with title, legend and labels - All observations:
plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Kitchen, name = "Kitchen",
type = "scatter", mode = "lines") %>% add_trace(y = ~houseDay$Laundry, name = "Laundry",
mode = "lines") %>% add_trace(y = ~houseDay$WaterHeater_AirConditioner,
name = "Water Heater & AC", mode = "lines") %>% layout(title = "Power Consumtion January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list(title = "Power (watt-hours)"))
## Subset the 9th day of January 2008 - 10 Minute frequency
houseDay10 <- newDF %>% filter(year == 2008 & month == 1 & day == 9 &
(minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
plot_ly(houseDay10, x = ~houseDay10$DateTime, y = ~houseDay10$Kitchen, name = "Kitchen", type = "scatter",
mode = "lines") %>%
add_trace(y = ~houseDay10$Laundry, name = "Laundry", mode = "lines") %>%
add_trace(y = ~houseDay10$WaterHeater_AirConditioner, name = "Water Heater & AC", mode = "lines") %>%
layout (title = "Power Consumtion January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list(title = "Power (watt-hours)"))
## Creating time series:
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(newDF, weekday == 2 & hour == 20 & minute == 1)
## Create TS object with SubMeter3:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify)
autoplot(tsKitchen_070809weekly)
tsKitchen_070809weekly
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
## Create TS object with SubMeter2:
tsLaundry_070809weekly <- ts(house070809weekly$Laundry, frequency = 52, start = c(2007,1))
autoplot(tsLaundry_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
## Create TS object with SubMeter3:
tsWH_AC_070809weekly <- ts(house070809weekly$WaterHeater_AirConditioner, frequency = 52, start = c(2007,1))
autoplot(tsWH_AC_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "WaterHeater&AirCon")
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast)
#Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitSM3 <- tslm(tsKitchen_070809weekly ~ trend + season)
#Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitSM3 <- tslm(tsKitchen_070809weekly ~ trend + season)
#Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitKitchen <- tslm(tsKitchen_070809weekly ~ trend + season)
summary(fitKitchen)
# Create the forecast for sub-meter 3. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
## CREATING TIME SERIES:
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(newDF, weekday == 6 & hour == 20 & minute == 1)
## Create TS object with SubMeter1:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
## CREATING TIME SERIES:
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(newDF, weekday == 5 & hour == 20 & minute == 1)
## Create TS object with SubMeter1:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
# Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitKitchen <- tslm(tsKitchen_070809weekly ~ trend + season)
summary(fitKitchen)
# Create the forecast for sub-meter 3. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
fitLaundry <- tslm(tsLaundry_070809weekly ~trend + season)
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
summary(fitLaundry)
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
fitWH_AC <- tslm(tsWH_AC_070809weekly ~trend + season)
summary(fitWH_AC)
forecastfitLaundry <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
forecastfitWH_AC <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
forecastfitWH_AC_c <- forecast(fitWH_AC, h = 20, level = c(80,90))
plot(forecastfitWH_AC_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
is.na(newDF)
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, PADR)
install.packages("BiocManager")
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, PADR)
install.packages("padr")
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, padr)
#Finding gaps in data and filling them with NA:
pad(newDF)
str(newDF)
#Finding gaps in data and filling them with NA:
as.POSIXct(newDF$DateTime, "%Y/%m/%d %H:%M:%S")
str(newDF)
#Finding gaps in data and filling them with NA:
newDF$DateTime <- as.POSIXct(newDF$DateTime, "%Y/%m/%d %H:%M:%S")
str(newDF)
pad(newDF)
attr(newDF$DateTime, "tzone") <- "Europe/Paris"
pad(newDF)
pad(newDF, break_above = 2)
newDF <- pad(newDF, break_above = 2)
is.na(newDF)
sum(is.na(newDF))
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(newDF, weekday == 5 & hour == 20 & minute == 1)
## Create TS object with SubMeter1:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
# Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitKitchen <- tslm(tsKitchen_070809weekly ~ trend + season)
summary(fitKitchen)
# Create the forecast for sub-meter 3. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter2:
tsLaundry_070809weekly <- ts(house070809weekly$Laundry, frequency = 52, start = c(2007,1))
autoplot(tsLaundry_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
fitLaundry <- tslm(tsLaundry_070809weekly ~trend + season)
summary(fitLaundry)
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter3:
tsWH_AC_070809weekly <- ts(house070809weekly$WaterHeater_AirConditioner, frequency = 52, start = c(2007,1))
autoplot(tsWH_AC_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "WaterHeater&AirCon")
fitWH_AC <- tslm(tsWH_AC_070809weekly ~trend + season)
summary(fitWH_AC)
forecastfitWH_AC <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
forecastfitWH_AC_c <- forecast(fitWH_AC, h = 20, level = c(80,90))
plot(forecastfitWH_AC_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
2:ncol(newDF)
newDF[,2]
summary(newDF[,2])
str(newDF[,2])
str(newDF[,7])
table(is.na(newDF$Time))
table(is.na(newDF$DateTime))
table(is.na(newDF$X))
#Deleting X and X.1 columns in dataframe:
newDF$X.1 <- NULL
newDF$X <- NULL
table(is.na(newDF$id))
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, padr, DescTools)
#Filling in id column:
newDF$id <- c(1:nrow(newDF))
table(is.na(newDF$id))
newDF$Date <- NULL
newDF$Time <- NULL
#Filling NA values with mode of the attribute column:
for (i in 3:ncol(newDF)) {
newDF[which(is.na(newDF[,i])),i] <- Mode(newDF[,i])
}
sum(is.na(newDF))
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(newDF, weekday == 5 & hour == 20 & minute == 1)
## Create TS object with SubMeter1:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
# Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitKitchen <- tslm(tsKitchen_070809weekly ~ trend + season)
summary(fitKitchen)
# Create the forecast for sub-meter 3. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
# Create sub-meter 3 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter2:
tsLaundry_070809weekly <- ts(house070809weekly$Laundry, frequency = 52, start = c(2007,1))
autoplot(tsLaundry_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
fitLaundry <- tslm(tsLaundry_070809weekly ~trend + season)
summary(fitLaundry)
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter1:
tsKitchen_070809weekly <- ts(house070809weekly$Kitchen, frequency = 52, start = c(2007,1))
autoplot(tsKitchen_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Kitchen")
plot.ts(tsKitchen_070809weekly)
# Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitKitchen <- tslm(tsKitchen_070809weekly ~ trend + season)
summary(fitKitchen)
# Create the forecast for sub-meter 1. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
plot(forecastfitKitchen)
# Create the forecast for sub-meter 1. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 52)
plot(forecastfitKitchen)
# Create sub-meter 1 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 52, level = c(80,90))
plot(forecastfitKitchen_c, ylim = c(0,20),ylab = "Watt-Hours", xlab = "Time")
plot(forecastfitKitchen_c, ylim = c(0,200),ylab = "Watt-Hours", xlab = "Time")
plot(forecastfitKitchen_c,ylab = "Watt-Hours", xlab = "Time")
# Create sub-meter 1 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 52, level = c(80,90))
plot(forecastfitKitchen_c,ylab = "Watt-Hours", xlab = "Time")
plot(forecastfitKitchen)
# Create sub-meter 1 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 52, level = c(80,90))
plot(forecastfitKitchen_c,ylab = "Watt-Hours", xlab = "Time")
# Create the forecast for sub-meter 1. Forecast ahead 20 time periods:
forecastfitKitchen <- forecast(fitKitchen, h = 20)
plot(forecastfitKitchen)
# Create sub-meter 1 forecast with confidence levels 80 and 90:
forecastfitKitchen_c <- forecast(fitKitchen, h = 20, level = c(80,90))
plot(forecastfitKitchen_c,ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter2:
tsLaundry_070809weekly <- ts(house070809weekly$Laundry, frequency = 52, start = c(2007,1))
autoplot(tsLaundry_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
fitLaundry <- tslm(tsLaundry_070809weekly ~trend + season)
summary(fitLaundry)
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c,ylab = "Watt-Hours", xlab = "Time")
plot(forecastfitLaundry)
## Create TS object with SubMeter3:
tsWH_AC_070809weekly <- ts(house070809weekly$WaterHeater_AirConditioner, frequency = 52, start = c(2007,1))
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c,ylab = "Watt-Hours", xlab = "Time")
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c,ylab = "Watt-Hours", xlab = "Time")
forecastfitLaundry <- forecast(fitLaundry, h = 20)
plot(forecastfitLaundry)
forecastfitLaundry_c <- forecast(fitLaundry, h = 20, level = c(80,90))
plot(forecastfitLaundry_c,ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter3:
tsWH_AC_070809weekly <- ts(house070809weekly$WaterHeater_AirConditioner, frequency = 52, start = c(2007,1))
autoplot(tsWH_AC_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "WaterHeater&AirCon")
fitWH_AC <- tslm(tsWH_AC_070809weekly ~trend + season)
summary(fitWH_AC)
forecastfitWH_AC <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
forecastfitWH_AC_c <- forecast(fitWH_AC, h = 20, level = c(80,90))
plot(forecastfitWH_AC_c,ylab = "Watt-Hours", xlab = "Time")
## Create TS object with SubMeter3:
tsWH_AC_070809weekly <- ts(house070809weekly$WaterHeater_AirConditioner, frequency = 52, start = c(2007,1))
autoplot(tsWH_AC_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "WaterHeater&AirCon")
fitWH_AC <- tslm(tsWH_AC_070809weekly ~trend + season)
summary(fitWH_AC)
forecastfitWH_AC <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
forecastfitWH_AC <- forecast(fitWH_AC, h = 20)
plot(forecastfitWH_AC)
summary(fitWH_AC)
## Decomposing Time series:
# Decompose Sub-meter 1 into trend, seasonal and remainder:
components070809Kitchen_weekly <- decompose(tsKitchen_070809weekly)
plot(components070809Kitchen_weekly)
summary(components070809Kitchen_weekly)
# Decompose Sub-meter 2 into trend, seasonal and remainder:
components070809Laundry_weekly <- decompose(tsLaundry_070809weekly)
plot(components070809Laundry_weekly)
summary(components070809Laundry_weekly)
# Decompose Sub-meter 3 into trend, seasonal and remainder:
components070809WH_AC_weekly <- decompose(tsWH_AC_070809weekly)
plot(components070809WH_AC_weekly)
summary(components070809WH_AC_weekly)
summary(components070809Kitchen_weekly$seasonal)
summary(components070809Kitchen_weekly$trend)
summary(components070809Kitchen_weekly$random)
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, padr, DescTools, stats)
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsKitchen_070809Adjusted <- tsKitchen_070809weekly - components070809Kitchen_weekly$seasonal
autoplot(tsKitchen_070809Adjusted)
## Create TS object with SubMeter2:
tsLaundry_070809weekly <- ts(house070809weekly$Laundry, frequency = 52, start = c(2007,1))
autoplot(tsLaundry_070809weekly, ts.colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
autoplot(tsLaundry_070809weekly, colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Laundry")
# Test Seasonal Adjustment by running Decompose again. Note the very, very small scale for Seasonal:
plot(decompose(tsKitchen_070809Adjusted))
# Holt Winters Exponential Smoothing & Plot:
tsKitchen_HW070809 <- HoltWinters(tsKitchen_070809Adjusted, beta = FALSE,
gamma = FALSE)
plot(tsKitchen_HW070809, ylim = c(0,25))
plot(tsKitchen_HW070809)
# HoltWinters forecast & plot:
tsKitchen_HW070809for <- forecast(tsKitchen_HW070809, h = 25)
plot(tsKitchen_HW070809for, ylab = "Watt-Hours", xlab = "Time - Kitchen")
# Forecast HoltWinters with diminished confidence levels
tsKitchen_HW070809forC <- forecast(tsKitchen_HW070809, h=25, level=c(10,25))
## Plot only the forecasted area
plot(tsKitchen_HW070809forC, ylab= "Watt-Hours", xlab="Time - Sub-meter 3", start(2010))
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsLaundry_070809Adjusted <- tsLaundry_070809weekly - components070809Laundry_weekly$seasonal
autoplot(tsLaundry_070809Adjusted)
# Test Seasonal Adjustment by running Decompose again. Note the very, very small scale for Seasonal:
plot(decompose(tsLaundry_070809Adjusted))
# Holt Winters Exponential Smoothing & Plot:
tsLaundry_HW070809 <- HoltWinters(tsLaundry_070809Adjusted, beta = FALSE,
gamma = FALSE)
plot(tsLaundry_HW070809)
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsLaundry_070809Adjusted <- tsLaundry_070809weekly - components070809Laundry_weekly$seasonal
autoplot(tsLaundry_070809Adjusted)
# Test Seasonal Adjustment by running Decompose again. Note the very, very small scale for Seasonal:
plot(decompose(tsLaundry_070809Adjusted))
# Holt Winters Exponential Smoothing & Plot:
tsLaundry_HW070809 <- HoltWinters(tsLaundry_070809Adjusted, beta = FALSE,
gamma = FALSE)
plot(tsLaundry_HW070809)
# Holt Winters Exponential Smoothing & Plot:
tsLaundry_HW070809 <- HoltWinters(tsLaundry_070809Adjusted)
plot(tsLaundry_HW070809)
# Holt Winters Exponential Smoothing & Plot:
tsLaundry_HW070809 <- HoltWinters(tsLaundry_070809Adjusted, beta = FALSE,
gamma = FALSE)
plot(tsLaundry_HW070809)
# HoltWinters forecast & plot:
tsLaundry_HW070809for <- forecast(tsLaundry_HW070809, h = 25)
plot(tsLaundry_HW070809for, ylab = "Watt-Hours", xlab = "Time - Kitchen")
# Forecast HoltWinters with diminished confidence levels
tsLaundry_HW070809forC <- forecast(tsLaundry_HW070809, h=25, level=c(10,25))
## Plot only the forecasted area
plot(tsLaundry_HW070809forC, ylab= "Watt-Hours", xlab="Time - Laundry", start(2010))
## Plot only the forecasted area
plot(tsKitchen_HW070809forC, ylab= "Watt-Hours", xlab="Time - Kitchen", start(2010))
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsWH_AC_070809Adjusted <- tsWH_AC_070809weekly - components070809WH_AC_weekly$seasonal
autoplot(tsWH_AC_070809Adjusted)
# Test Seasonal Adjustment by running Decompose again. Note the very, very small scale for Seasonal:
plot(decompose(tsWH_AC_070809Adjusted))
# Holt Winters Exponential Smoothing & Plot:
tsWH_AC_HW070809 <- HoltWinters(tsWH_AC_070809Adjusted, beta = FALSE,
gamma = FALSE)
plot(tsWH_AC_HW070809)
# HoltWinters forecast & plot:
tsWH_AC_HW070809for <- forecast(tsWH_AC_HW070809, h = 25)
plot(tsWH_AC_HW070809for, ylab = "Watt-Hours", xlab = "Time - WH_AC")
# Forecast HoltWinters with diminished confidence levels
tsWH_AC_HW070809forC <- forecast(tsWH_AC_HW070809, h=25, level=c(10,25))
## Plot only the forecasted area
plot(tsWH_AC_HW070809forC, ylab= "Watt-Hours", xlab="Time - Laundry", start(2010))
sum(is.na(newDF))
newDF$Date <- date(newDF$DateTime)
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, padr, DescTools, stats, xts)
newDF$Date <- date(newDF$DateTime)
write.csv(x = newDF, file = "final_df.csv")
newDF <- read.csv("final_df.csv")
house070809week <- newDF %>% group_by(Date,week) %>% summarise(Kitchen = mean(Kitchen),
Laundry = mean(Laundry),
WH_AC = mean(WaterHeater_AirConditioner),
GAP = mean(Global_active_power))
View(house070809week)
house070809week <- newDF %>% group_by(year,week) %>% summarise(Kitchen = mean(Kitchen),
Laundry = mean(Laundry),
WH_AC = mean(WaterHeater_AirConditioner),
GAP = mean(Global_active_power))
ddd <- house070809week
## Create TS object with Global active power:
tsGAP_070809 <- ts(ddd$GAP, frequency = 53, start = c(2007,1))
autoplot(tsGAP_070809, colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Global_Active_Power")
fitGAP <- tslm(tsGAP_070809 ~trend + season)
summary(fitGAP)
forecastfitGAP <- forecast(fitGAP, h = 20)
plot(forecastfitGAP)
forecastfitGAP <- forecast(fitGAP, h = 4)
plot(forecastfitGAP)
forecastfitGAP <- forecast(fitGAP, h = 20)
plot(forecastfitGAP)
forecastfitGAP_c <- forecast(fitGAP, h = 20, level = c(80,90))
plot(forecastfitGAP_c,ylab = "Watt-Hours", xlab = "Time")
components070809_GAP <- stl(tsGAP_070809,s.window = 'periodic' )
plot(components070809_GAP)
autoplot(components070809_GAP)
house070809week <- newDF %>% group_by(year,week) %>% summarise(Kitchen = sum(Kitchen),
Laundry = sum(Laundry),
WH_AC = sum(WaterHeater_AirConditioner),
GAP = sum(Global_active_power))
ddd <- house070809week
## Create TS object with Global active power:
tsGAP_070809 <- ts(ddd$GAP, frequency = 53, start = c(2007,1))
autoplot(tsGAP_070809, colour = "red", xlab = "Time", ylab = "Watt Hours", main = "Global_Active_Power")
fitGAP <- tslm(tsGAP_070809 ~trend + season)
summary(fitGAP)
forecastfitGAP <- forecast(fitGAP, h = 20)
plot(forecastfitGAP)
forecastfitGAP_c <- forecast(fitGAP, h = 20, level = c(80,90))
plot(forecastfitGAP_c,ylab = "Watt-Hours", xlab = "Time")
components070809_GAP <- stl(tsGAP_070809,s.window = 'periodic' )
autoplot(components070809_GAP)
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsGAP_070809Adjusted <- tsGAP_070809 - components070809_GAP$seasonal
tsGAP_070809
components070809_GAP$seasonal
components070809_GAP
components070809_GAP$seasonal
pacman::p_load(RMySQL, dplyr, lubridate, ggplot2, readr, plotly, ggfortify, forecast, padr, DescTools, stats, xts)
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsGAP_070809Adjusted <- tsGAP_070809 - components070809_GAP$seasonal
components070809_GAP <- stl(tsGAP_070809,s.window = 'periodic' )
autoplot(components070809_GAP)
components070809_GAP <- stl(tsGAP_070809,s.window = 'periodic' )
seasonal <- components070809_GAP$time.series[,1]
trend <- components070809_GAP$time.series[,2]
random <- components070809_GAP$time.series[,3]
# Seasonal adjusting sub-meter 1 by subtracting the seasonal component & plot:
tsGAP_070809Adjusted <- tsGAP_070809
autoplot(tsGAP_070809Adjusted)
# Holt Winters Exponential Smoothing & Plot:
ts_GAP_HW070809 <- HoltWinters(tsGAP_070809Adjusted,  beta = FALSE,
gamma = TRUE)
plot(ts_GAP_HW070809)
# HoltWinters forecast & plot:
ts_GAP_HW070809for <- forecast(ts_GAP_HW070809, h = 25)
plot(ts_GAP_HW070809for, ylab = "Watt-Hours", xlab = "Time - Kitchen")
# Forecast HoltWinters with diminished confidence levels
ts_GAP_HW070809forC <- forecast(ts_GAP_HW070809, h=25, level=c(10,25))
## Plot only the forecasted area
plot(ts_GAP_HW070809forC, ylab= "Watt-Hours", xlab="Time - GAP", start(2010))
plot(forecastfitGAP_c,ylab = "Watt-Hours", xlab = "Time")
# Checking the size of random component:
sum(abs(random))
# Checking the size of random component:
random_variation_HW <- sum(abs(random))
size(random)
length(random)
# Checking the size of random component:
absolute_error_HW <- sum(abs(random))/length(random)
absolute_error_HW
autoplot(window(tsGAP_070809)) + autolayer(tsGAP_070809,series = "mean", PI = FALSE)
components070809_GAP <- stl(tsGAP_070809,s.window = 'periodic' )
autoplot(components070809_GAP)
seasonal
plot(seasonal)
